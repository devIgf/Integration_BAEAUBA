    public function importJson(Request $request)
    {
        $file = $request->file('json_file');
        $data = json_decode(file_get_contents($file), true);

        try {
            DB::beginTransaction();

            $batchSize = 27;
            $batch = [];

            // Récupérer la valeur maximale actuelle de EC_No
            $nextECNo = DB::table('F_ECRITUREC')->max('EC_No') + 1;

            foreach ($data as $entry) {
                // Vérifications des champs
                if (!$this->JO_Num_check($entry['JO_Num'])) {
                    throw new \Exception('Invalid JO_Num: ' . $entry['JO_Num']);
                }
                if (!$this->EC_No_check($nextECNo)) {
                    throw new \Exception('Invalid EC_No: ' . $nextECNo);
                }
                if (!$this->EC_Jour_check($entry['EC_Jour'])) {
                    throw new \Exception('Invalid EC_Jour: ' . $entry['EC_Jour']);
                }
                if (!$this->EC_RefPiece_check($entry['EC_RefPiece'])) {
                    throw new \Exception('Invalid EC_RefPiece: ' . $entry['EC_RefPiece']);
                }
                if (!$this->CG_Num_check($entry['CG_Num'])) {
                    throw new \Exception('Invalid CG_Num: ' . $entry['CG_Num']);
                }
                // if (!$this->CT_Num_check($entry['CT_Num'])) {
                //     throw new \Exception('Invalid CT_Num: ' . $entry['CT_Num']);
                // }
                if (!$this->EC_Intitule_check($entry['EC_Intitule'])) {
                    throw new \Exception('Invalid EC_Intitule: ' . $entry['EC_Intitule']);
                }
                if (!$this->EC_Sens_check($entry['EC_Sens'])) {
                    throw new \Exception('Invalid EC_Sens: ' . $entry['EC_Sens']);
                }
                if (!$this->EC_Montant_check($entry['EC_Montant'])) {
                    throw new \Exception('Invalid EC_Montant: ' . $entry['EC_Montant']);
                }

                // Convertir les dates en millisecondes au format de date
                $JM_Date = Carbon::createFromTimestampMs($entry['JM_Date'])->startOfMonth()->toDateTimeString();
                $EC_Date = Carbon::createFromTimestampMs($entry['EC_Date'])->startOfMonth()->toDateTimeString();
                $EC_Echeance = Carbon::createFromTimestampMs($entry['EC_Echeance'])->toDateTimeString();

                $row = [
                    'JO_Num' => (string) $entry['JO_Num'],
                    'EC_No' => $nextECNo++,
                    'JM_Date' => $JM_Date,
                    'EC_Jour' => $entry['EC_Jour'],
                    'EC_Date' => $EC_Date,
                    'EC_Piece' => $entry['EC_Piece'],
                    'EC_RefPiece' => (string) $entry['EC_RefPiece'],
                    'CG_Num' => (string) $entry['CG_Num'],
                    'CT_Num' => empty($entry['CT_Num']) ? NULL : (string)$entry['CT_Num'],
                    'EC_Intitule' => (string) $entry['EC_Intitule'],
                    'EC_Echeance' => $EC_Echeance,
                    'EC_Sens' => $entry['EC_Sens'],
                    'EC_Montant' => (string) $entry['EC_Montant'],
                    // Les colonnes ajoutées
                    'EC_NoLink' => 0,
                    'EC_TresoPiece' => '',
                    'N_Reglement' => 0,
                    'EC_Parite' => 0.000000,
                    'EC_Quantite' => 0.000000,
                    'N_Devise' => 0,
                    'EC_Lettre' => 0,
                    'EC_Lettrage' => '',
                    'EC_Point' => 0,
                    'EC_Pointage' => '',
                    'EC_Impression' => 0,
                    'EC_Cloture' => 0,
                    'EC_CType' => 0,
                    'EC_Rappel' => 0,
                    'CT_NumCont' => NULL,
                    'EC_LettreQ' => 0,
                    'EC_LettrageQ' => '',
                    'EC_ANType' => 0,
                    'EC_RType' => 0,
                    'EC_Devise' => 0.000000,
                    'EC_Remise' => 0,
                    'EC_ExportExpert' => 0,
                    'EC_ExportRappro' => 0,
                    'TA_Code' => 1,
                    'EC_Norme' => NULL,
                    'TA_Provenance' => 0,
                    'EC_PenalType' => 0,
                    'EC_DatePenal' => '1753-01-01 00:00:00',
                    'EC_DateRelance' => '1753-01-01 00:00:00',
                    'EC_DateRappro' => '1753-01-01 00:00:00',
                    'EC_Reference' => '',
                    'EC_StatusRegle' => 0,
                    'EC_MontantRegle' => 0.000000,
                    'EC_DateRegle' => '1753-01-01 00:00:00',
                    'EC_RIB' => 0,
                    'EC_NoCloture' => 1,
                    'EC_DateOp' => '1753-01-01 00:00:00',
                    'EC_DateCloture' => '1753-01-01 00:00:00',
                    'EC_PayNowUrl' => '',
                    'EC_ExtProvenance' => 0,
                    'EC_ExtSequence' => 0,
                    'cbCreationUser' => 'CA2D6792-F19C-4A59-9EA0-16FEB0560939',
                    'SAC_Id' => '00000000-0000-0000-0000-000000000000'
                ];

                // Ajouter la ligne au batch
                $batch[] = $row;

                // Insérer le batch lorsque la taille atteint $batchSize
                if (count($batch) === $batchSize) {
                    DB::table('F_ECRITUREC')->insert($batch);
                    // Réinitialiser le batch
                    $batch = [];
                }
            }

            // Insérer les lignes restantes si le batch est non vide
            if (!empty($batch)) {
                DB::table('F_ECRITUREC')->insert($batch);
            }

            DB::commit();

            return response()->json(['message' => 'Données importées avec succès.'], 200);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Erreur lors de l\'importation des données : ' . $e->getMessage());
            return response()->json(['message' => 'Erreur lors de l\'importation des données : ' . $e->getMessage()], 500);
        }
    }

    private function JO_Num_check($value)
    {
        return is_string($value) && strlen($value) <= 7;
    }

    private function EC_No_check($value)
    {
        return is_int($value) && $value > 0;
    }

    private function EC_Jour_check($value)
    {
        return is_int($value) && $value >= 1 && $value <= 31;
    }

    private function EC_RefPiece_check($value)
    {
        return is_string($value) && strlen($value) <= 17;
    }

    private function CG_Num_check($value)
    {
        return (is_string($value) && strlen($value) <= 13) || is_int($value);
    }

    private function CT_Num_check($value)
    {
        if (is_null($value)) {
            return true;
        }
        if (is_string($value) && strlen($value) <= 17) {
            // Vérifier l'existence dans la table dbo.F_COMPTET
            return DB::table('dbo.F_COMPTET')->where('CT_Num', $value)->exists();
        }
        return false;
    }

    private function EC_Intitule_check($value)
    {
        return is_string($value) && strlen($value) <= 69;
    }

    private function EC_Sens_check($value)
    {
        return is_int($value) && ($value === 0 || $value === 1);
    }

    private function EC_Montant_check($value)
    {
        return (is_int($value) || is_float($value)) && $value >= 0;
    }

    private function date_check($value)
    {
        if ($value === -6847804800000) {
            return true;
        }
        return Carbon::createFromTimestampMs($value) !== false;
    }

    private function EC_Piece($value, $jm_date)
    {
        $month = $this->get_month_from_milliseconds($jm_date);
        return $value === $month;
    }

    private function get_month_from_milliseconds($milliseconds)
    {
        return Carbon::createFromTimestampMs($milliseconds)->format('m');
    }

    private function is_cg_num_tiers($cg_num, $ct_num)
    {
        return $cg_num === "411100" ? $ct_num : NULL;
    }

    private function is_date_correct($date_ms)
    {
        return $date_ms ?: -6847804800000;
    }

    private function is_debit_equals_credit($list_data)
    {
        $factures = [];
        foreach ($list_data as $entry) {
            $factures[$entry['EC_Piece']]['debit'] = $factures[$entry['EC_Piece']]['debit'] ?? 0;
            $factures[$entry['EC_Piece']]['credit'] = $factures[$entry['EC_Piece']]['credit'] ?? 0;

            if ($entry['EC_Sens'] == 0) {
                $factures[$entry['EC_Piece']]['debit'] += $entry['EC_Montant'];
            } else {
                $factures[$entry['EC_Piece']]['credit'] += $entry['EC_Montant'];
            }
        }
        foreach ($factures as $facture) {
            if ($facture['debit'] !== $facture['credit']) {
                return false;
            }
        }
        return true;
    }
