public function importJson(Request $request)
    {
        $file = $request->file('json_file');
        $data = json_decode(file_get_contents($file), true);

        try {
            DB::beginTransaction();

            $batchSize = 27;
            $batch = [];

            // Récupérer la valeur maximale actuelle de EC_No
            $nextECNo = DB::table('F_ECRITUREC')->max('EC_No') + 1;

            foreach ($data as $entry) {
                // Convertir les dates en millisecondes au format de date
                $JM_Date = Carbon::createFromTimestampMs($entry['JM_Date'])->startOfMonth()->toDateTimeString();
                $EC_Date = Carbon::createFromTimestampMs($entry['EC_Date'])->startOfMonth()->toDateTimeString();
                $EC_Echeance = Carbon::createFromTimestampMs($entry['EC_Echeance'])->toDateTimeString();

                $row = [
                    'JO_Num' => (string) $entry['JO_Num'],
                    'EC_No' => $nextECNo++,
                    'JM_Date' => $JM_Date,
                    'EC_Jour' => $entry['EC_Jour'],
                    'EC_Date' => $EC_Date,
                    'EC_Piece' => $entry['EC_Piece'],
                    'EC_RefPiece' => (string) $entry['EC_RefPiece'],
                    'CG_Num' => (string) $entry['CG_Num'],
                    'CT_Num' => empty($entry['CT_Num']) ? NULL : (string)$entry['CT_Num'],
                    'EC_Intitule' => (string) $entry['EC_Intitule'],
                    'EC_Echeance' => $EC_Echeance,
                    'EC_Sens' => $entry['EC_Sens'],
                    'EC_Montant' => (string) $entry['EC_Montant'],
                    // Les colonnes ajoutées
                    'EC_NoLink' => 0,
                    'EC_TresoPiece' => '',
                    'N_Reglement' => 0,
                    'EC_Parite' => 0.000000,
                    'EC_Quantite' => 0.000000,
                    'N_Devise' => 0,
                    'EC_Lettre' => 0,
                    'EC_Lettrage' => '',
                    'EC_Point' => 0,
                    'EC_Pointage' => '',
                    'EC_Impression' => 0,
                    'EC_Cloture' => 0,
                    'EC_CType' => 0,
                    'EC_Rappel' => 0,
                    'CT_NumCont' => NULL,
                    'EC_LettreQ' => 0,
                    'EC_LettrageQ' => '',
                    'EC_ANType' => 0,
                    'EC_RType' => 0,
                    'EC_Devise' => 0.000000,
                    'EC_Remise' => 0,
                    'EC_ExportExpert' => 0,
                    'EC_ExportRappro' => 0,
                    'TA_Code' => 1,
                    'EC_Norme' => NULL,
                    'TA_Provenance' => 0,
                    'EC_PenalType' => 0,
                    'EC_DatePenal' => '1753-01-01 00:00:00',
                    'EC_DateRelance' => '1753-01-01 00:00:00',
                    'EC_DateRappro' => '1753-01-01 00:00:00',
                    'EC_Reference' => '',
                    'EC_StatusRegle' => 0,
                    'EC_MontantRegle' => 0.000000,
                    'EC_DateRegle' => '1753-01-01 00:00:00',
                    'EC_RIB' => 0,
                    'EC_NoCloture' => 1,
                    'EC_DateOp' => '1753-01-01 00:00:00',
                    'EC_DateCloture' => '1753-01-01 00:00:00',
                    'EC_PayNowUrl' => '',
                    'EC_ExtProvenance' => 0,
                    'EC_ExtSequence' => 0,
                    'cbCreationUser' => 'CA2D6792-F19C-4A59-9EA0-16FEB0560939',
                    'SAC_Id' => '00000000-0000-0000-0000-000000000000'
                ];

                // Ajouter la ligne au batch
                $batch[] = $row;

                // Insérer le batch lorsque la taille atteint $batchSize
                if (count($batch) === $batchSize) {
                    DB::table('F_ECRITUREC')->insert($batch);
                    // Réinitialiser le batch
                    $batch = [];
                }
            }

            // Insérer les lignes restantes si le batch est non vide
            if (!empty($batch)) {
                DB::table('F_ECRITUREC')->insert($batch);
            }

            DB::commit();

            return response()->json(['message' => 'Données importées avec succès.'], 200);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Erreur lors de l\'importation des données : ' . $e->getMessage());
            return response()->json(['message' => 'Erreur lors de l\'importation des données : ' . $e->getMessage()], 500);
        }
    }
